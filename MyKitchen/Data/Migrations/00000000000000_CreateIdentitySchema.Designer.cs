// <auto-generated />
using System;
using MyKitchen.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MyKitchen.Data.Migrations
{
	[DbContext(typeof(ApplicationDbContext))]
	[Migration("00000000000000_CreateIdentitySchema")]
	partial class CreateIdentitySchema
	{
		protected override void BuildTargetModel(ModelBuilder modelBuilder)
		{
#pragma warning disable 612, 618
			modelBuilder
				.HasAnnotation("ProductVersion", "2.1.0")
				.HasAnnotation("Relational:MaxIdentifierLength", 128)
				.HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
				{
					b.Property<string>("Id")
						.ValueGeneratedOnAdd();

					b.Property<string>("ConcurrencyStamp")
						.IsConcurrencyToken();

					b.Property<string>("Name")
						.HasMaxLength(256);

					b.Property<string>("NormalizedName")
						.HasMaxLength(256);

					b.HasKey("Id");

					b.HasIndex("NormalizedName")
						.IsUnique()
						.HasName("RoleNameIndex")
						.HasFilter("[NormalizedName] IS NOT NULL");

					b.ToTable("AspNetRoles");
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

					b.Property<string>("ClaimType");

					b.Property<string>("ClaimValue");

					b.Property<string>("RoleId")
						.IsRequired();

					b.HasKey("Id");

					b.HasIndex("RoleId");

					b.ToTable("AspNetRoleClaims");
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
				{
					b.Property<string>("Id")
						.ValueGeneratedOnAdd();

					b.Property<int>("AccessFailedCount");

					b.Property<string>("ConcurrencyStamp")
						.IsConcurrencyToken();

					b.Property<string>("Email")
						.HasMaxLength(256);

					b.Property<bool>("EmailConfirmed");

					b.Property<bool>("LockoutEnabled");

					b.Property<DateTimeOffset?>("LockoutEnd");

					b.Property<string>("NormalizedEmail")
						.HasMaxLength(256);

					b.Property<string>("NormalizedUserName")
						.HasMaxLength(256);

					b.Property<string>("PasswordHash");

					b.Property<string>("PhoneNumber");

					b.Property<bool>("PhoneNumberConfirmed");

					b.Property<string>("SecurityStamp");

					b.Property<bool>("TwoFactorEnabled");

					b.Property<string>("UserName")
						.HasMaxLength(256);

					b.HasKey("Id");

					b.HasIndex("NormalizedEmail")
						.HasName("EmailIndex");

					b.HasIndex("NormalizedUserName")
						.IsUnique()
						.HasName("UserNameIndex")
						.HasFilter("[NormalizedUserName] IS NOT NULL");

					b.ToTable("AspNetUsers");
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

					b.Property<string>("ClaimType");

					b.Property<string>("ClaimValue");

					b.Property<string>("user_id")
						.IsRequired();

					b.HasKey("Id");

					b.HasIndex("user_id");

					b.ToTable("AspNetUserClaims");
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
				{
					b.Property<string>("LoginProvider")
						.HasMaxLength(128);

					b.Property<string>("ProviderKey")
						.HasMaxLength(128);

					b.Property<string>("ProviderDisplayName");

					b.Property<string>("user_id")
						.IsRequired();

					b.HasKey("LoginProvider", "ProviderKey");

					b.HasIndex("user_id");

					b.ToTable("AspNetUserLogins");
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
				{
					b.Property<string>("user_id");

					b.Property<string>("RoleId");

					b.HasKey("user_id", "RoleId");

					b.HasIndex("RoleId");

					b.ToTable("AspNetUserRoles");
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
				{
					b.Property<string>("user_id");

					b.Property<string>("LoginProvider")
						.HasMaxLength(128);

					b.Property<string>("Name")
						.HasMaxLength(128);

					b.Property<string>("Value");

					b.HasKey("user_id", "LoginProvider", "Name");

					b.ToTable("AspNetUserTokens");
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
				{
					b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
						.WithMany()
						.HasForeignKey("RoleId")
						.OnDelete(DeleteBehavior.Cascade);
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
				{
					b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
						.WithMany()
						.HasForeignKey("user_id")
						.OnDelete(DeleteBehavior.Cascade);
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
				{
					b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
						.WithMany()
						.HasForeignKey("user_id")
						.OnDelete(DeleteBehavior.Cascade);
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
				{
					b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
						.WithMany()
						.HasForeignKey("RoleId")
						.OnDelete(DeleteBehavior.Cascade);

					b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
						.WithMany()
						.HasForeignKey("user_id")
						.OnDelete(DeleteBehavior.Cascade);
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
				{
					b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
						.WithMany()
						.HasForeignKey("user_id")
						.OnDelete(DeleteBehavior.Cascade);
				});
#pragma warning restore 612, 618
		}
	}
}
